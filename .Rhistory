RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
library(nwisnfie)
RunDBDiagnostics(config)
cc
library(nwisnfie)
RunDBDiagnostics(config)
?print
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
colbind
cbind
library(nwisnfie)
RunDBDiagnostics(config)
str
RunDBDiagnostics(config)
library(nwisnfie)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
c("one", "two")
b <- c("three", "foure")
a <- c("one", "two")
cbind(a,b)
library(nwisnfie)
a <- c("one", "two")
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
names(config$tables)
library(nwisnfie)
RunDBDiagnostics(config)
library(nwisnfie)
RunDBDiagnostics(config)
LoadConfiguration(config)
LoadConfiguration("~/Desktop/Demo/global_config.yaml")
LoadConfiguration("~/Desktop/Demo/global_config.yaml")
library(nwisnfie)
LoadConfiguration("~/Desktop/Demo/global_config.yaml")
config <- LoadConfiguration("~/Desktop/Demo/global_config.yaml")
config
isNull(config$logging$file)
?isnull
??isnull
is.null(config$logging$file)
library(nwisnfie)
config <- LoadConfiguration("~/Desktop/Demo//global_config.yaml")
RunDBDiagnostics(config)
RunDBDiagnostics(config)
config
RunDBDiagnostics(config)
config$logging$file
cat("test", file = NULL)
?cat
RunDBDiagnostics(config)
RunDBDiagnostics(config)
config <- LoadConfiguration("~/Desktop/Demo//global_config.yaml")
RunDBDiagnostics(config)
config <- LoadConfiguration("~/Desktop/Demo//global_config.yaml")
RunDBDiagnostics(config)
library(nwisnfie)
config <- LoadConfiguration("~/Desktop/Demo//global_config.yaml")
RunDBDiagnostics(config)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
RebuildStaticTables(config)
cluster <- parallel::makePSOCKcluster(names = ncores, outfile = "")
ncores = 2
cluster <- parallel::makePSOCKcluster(names = ncores, outfile = "")
cluster
summary(cluster)
cluster[1,]
cluster[1]
str(cluster)
str(cluster[1])
cluster[1][1]
cluster[1][2]
cluster[[1]]
cluster[[2]]
unlist(cluster)
lapply(cluster, print)
library(nwisnfie)
RebuildStaticTables(config)
library(nwisnfie)
library(nwisnfie)
RebuildStaticTables(config)
TestCluster(config)
cluster
cluster[[1]]
cluster[[2]]
typeof(cluster[[2]])
cluster[[1]]
library(nwisnfie)
cluster[[1]]
TestCluster(config)
cluster
cluster[[1]]
str(cluster)
library(nwisnfie)
TestCluster(config)
library(nwisnfie)
TestCluster(config)
cluster <- StartCluster(config)
config$con
cluster[[1]]
str(cluster[[1]])
cluster[[1]]$con
summary(cluster[[1]])
toString(cluster[[1]])
print(cluster[[1]])
cat(cluster[[1]])
capture.output(cluster[[1]])
library(nwisnfie)
TestCluster(config)
library(nwisnfie)
TestCluster(config)
library(nwisnfie)
TestCluster(config)
cluster
library(nwisnfie)
TestCluster(config)
library(nwisnfie)
TestCluster(config)
library(nwisnfie)
library(nwisnfie)
TestCluster(config)
TestClusterSettings(config)
library(nwisnfie)
library(nwisnfie)
library(nwisnfie)
SuperTest(config)
library(nwisnfie)
SuperTest(config)
library(nwisnfie)
library(nwisnfie)
library(nwisnfie)
WhichStaticTablesExist(config)
WhichStaticTablesExist(config)
library(nwisnfie)
config$tables[]
config$tables["sensor.metadata"]
library(nwisnfie)
WhichStaticTablesExist(config)
WhichTablesExist(config)
?WhichStaticTablesExist
RebuildStaticTables(config)
WhichStaticTablesExist(config)
RebuildStaticTables(config)
WhichStaticTablesExist(config)
library(nwisnfie)
RebuildStaticTables(config)
WhichStaticTablesExist(config)
?basicTextGatherer
??basicTextGatherer
??XML
xmlValue
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
config
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
library(nwisnfie)
DropAllTables(config)
library(nwisnfie)
RebuildStaticTables(config)
DropDynamicTables(config)
DownloadOneSite(config)
library(nwisnfie)
DownloadOneSite(config)
?GetAllSites
library(nwisnfie)
library(nwisnfie)
DropStaticTables(config)
DropDynamicTables(config)
BuildDynamicTables(config)
Bootstrap(config)
WhichTablesExist(config)
RunDBDiagnostics(config)
PopulateStaticTables(config)
library(nwisnfie)
PopulateStaticTables(config)
TestDBConnection(config)
library(nwisnfie)
Bootstrap(config)
library(nwisnfie)
Bootstrap(config2)
library(nwisnfie)
library(nwisnfie)
LoadConfiguration("~/Desktop/Demo")
InstallFiles("~/Demo")
TestDBConnection(config)
RunDBDiagnostics(config)
PopulateStaticTables(config)
BuildDynamicTables(config)
config$collections$lookback
config$collections$lookback <- "P3D"
config
Bootstrap(config)
.ISO8601ToEpochTime <- function(ISO8601){
}
library(nwisnfie)
RunDBDiagnostics(config)
Sample <- {
query = "select * from data2 where ts > '2015-01-09' AND ts <= '2015-01-11';"
data <- RunQuery(conn = conn,
config = config,
query = query)
}
library(nwisnfie)
library(nwisnfie)
data <- Sample(config)
library(nwisnfie)
data <- Sample(config)
object.sizeof(data)
install.packages("pryr")
library(pryr)
object_sizeof(data)
object_size(data)
data <- Sample(config)
library(nwisnfie)
source("~/Desktop/test.R")
data <- data[names(data) %in% c("familyid", "ts", "value", "validated", "paramcd")]
head(data)
NCBuild(data = data, config = config)
NCBuild(data = data, config = config)
library(nwisnfie)
?ncdf_put
?ncdf
?attr
?ncatt_put
??ncatt
??ncdf4
library(nwisnfie)
NCBuild(data = data, config = config)
head(data)
tail(data)
library(nwisnfie)
NCBuild(data = data, config = config)
library(nwisnfie)
source("~/Desktop/test.R")
config <- LoadConfiguration("~/Demo/nwisnfie/global_config.yaml")
config <- LoadConfiguration("~/Demo/global_config.yaml")
config <- LoadConfiguration("~/demo/global_config.yaml")
config <- LoadConfiguration("~/Desktop/demo/global_config.yaml")
head(data)
data <- data[!names(data) %in% c("updated", "imported", "seriesid")]
head(data)
NCBuild(data = data, config = config)
library(nwisnfie)
NCBuild(data = data, config = config)
library(nwisnfie)
NCBuild(config = config, data = data)
SyncDB(config = config, period = "PT36H")
SyncDB(config = config, period = "PT36H")
library(nwisnfie)
library(nwisnfie)
SyncDB(config = config, period = "PT36H")
LoadConfiguration
?Sample
??Sample
?Sample
Sample
library(nwisnfie)
data2 <- Sample(config)
install_github("Kevin-M-Smith/nwisnfie")
library(devtools)
install_github("Kevin-M-Smith/nwisnfie")
install_github("Kevin-M-Smith/nwisnfie")
library(nwisnfie)
InstallFiles("~/Desktop/Demo")
config <- LoadConfiguration("~/Desktop/Demo/global_config.yaml")
RunDBDiagnostics(config)
RunDBDiagnostics(config)
library(nwisnfie)
library(nwisnfie)
library(nwisnfie)
config
library(nwisnfie)
RunDBDiagnostics(config)
config <- LoadConfiguration("~/Desktop/Demo/global_config.yaml")
RunDBDiagnostics(config)
query <- paste("select * from site_assets;")
conn <- StartDBConnection(config)
site.assets <- RunQuery(query = query, conn = conn, config = config)
View(site.assets)
library(plyr)
demo <- ddply(data, c("parm_cd"), summarize, n = count("parm_cd"))
demo <- ddply(site.assets, c("parm_cd"), summarize, n = count("parm_cd"))
demo <- ddply(site.assets, c("parm_cd"), summarize, n = count(parm_cd))
count(site.assets, parm_cd)
count(site.assets, "parm_cd")
parameter_codes
str(parameter_codes)
join()
?join
counts <- count(site.assets, "parm_cd")
counts <- join(counts, parameter_codes, type = "left")
head(coutns)
head(counts)
descr <- subset(parameter_codes, select = c("parameter_cd", "parameter_nm", "parameter_units"))
head(descr)
colnames(count)
names(count)
colnames(counts)
?merge
counts <- count(site.assets, "parm_cd")
descr <- subset(parameter_codes, select = c("parameter_cd", "parameter_nm", "parameter_units"))
counts <- merge(x = counts,
y = parameter_codes,
by.x = "parm_cd",
by.y = "parameter_cd")
head(counts)
head(counts)
head(counts)
head(counts)
head(counts)
head(counts)
head(counts)
?count
?merege
?merge
?write.csv
write.csv(counts, file = "frequencies.csv")
pwd()
install.packages("WriteXLS")
library(writeXLS)
library(WriteXLS)
??WriteXLS
WriteXLS(counts, file = "~/Desktop/iv-frequencies.xls")
WriteXLS(counts, ExcelFileName = "~/Desktop/iv-frequencies.xls")
WriteXLS("counts", ExcelFileName = "~/Desktop/iv-frequencies.xls")
str(counts)
?write.table
write.table(counts, "~/Desktop/iv-frequencies.csv", sep = ",")
View(site.assets)
query <- paste(“select site_no, parm_cd from site_assets
where
parm_cd = “00045” OR
parm_cd = “72192” OR
parm_cd = “99772” OR
parm_cd = “00193”;
query <- paste("select site_no, parm_cd from site_assets
where
parm_cd = \"00045\" OR
parm_cd = \"72192\" OR
parm_cd = \"99772\" OR
parm_cd = \"00193\";")
res <- RunQuery(conn = conn,
query = query,
config = config)
query <- paste("select site_no, parm_cd from site_assets
where
parm_cd = '00045' OR
parm_cd = \"72192\" OR
parm_cd = \"99772\" OR
parm_cd = \"00193\";")
res <- RunQuery(conn = conn,
query = query,
config = config)
query <- paste("select site_no, parm_cd from site_assets
where
parm_cd = '00045' OR
parm_cd = '72192' OR
parm_cd = '99772' OR
parm_cd = '00193';")
res <- RunQuery(conn = conn,
query = query,
config = config)
View(res)
View(plyr::dcast(res))
?dcast
library(reshape2)
View(reshape2::dcast(res))
View(reshape2::dcast(res, parm_cd ~ site_no))
View(t(reshape2::dcast(res, parm_cd ~ site_no)))
res <- t(reshape2::dcast(res, parm_cd ~ site_no))
head(res)
?dcast
res <- t(reshape2::dcast(res, parm_cd ~ site_no, margin = "parm_cd"))
res <- t(reshape2::dcast(res, parm_cd ~ site_no))
sub <- t(reshape2::dcast(res, parm_cd ~ site_no))
res <- RunQuery(conn = conn,
query = query,
config = config)
sub <- t(reshape2::dcast(res, parm_cd ~ site_no))
sub
sum(sub[,1])
sum(as.numeric(sub[,1]))
sum(as.numeric(sub[,3]))
sum(as.numeric(sub[,2]))
sum(as.numeric(sub[,2]))
sum(as.numeric(sub[,3]))
sub[,1]
length(sub[,1])
length(sub[,2])
sub[,2]
sum(as.numeric(sub[,2]))
query <- paste("select site_no, parm_cd from site_assets
where
parm_cd = '00045' OR
parm_cd = '72192' OR
parm_cd = '99772' OR
parm_cd = '00193';")
res <- RunQuery(conn = conn,
query = query,
config = config)
View(res)
View(count(res, site_no))
View(count(res, "site_no"))
View(res)
des <- merge(x = res,
y = plyr::count(res, "site_no"),
by = "site_no")
View(des)
tail(des)
head(des)
unique(res["parm_cd"])
res["parm_cd"]
unique(res["parm_cd"])
names(res["parm_cd"])
rownames(res["parm_cd"])
names(res["parm_cd"])
unique(res["parm_cd"])
View(des)
order(des, by = "freq")
?order
order(des$freq)
?sort
sort.list(des$freq)
max(des$freq)
sub <- subset(des, freq == 1)
View(sub)
sub <- subset(des, "parm_cd" != "00045")
sub
sub <- subset(des, freq == 1)
sub <- subset(sub, "parm_cd" != "00045")
sub
sub <- subset(sub, parm_cd != "00045")
sub
length(sub)
nrow(sub)
sub2 <- subset(sub, parm_cd == '72192')
nrow(sub2)
sub3 <- subset(sub, parm_cd == '99772')
nrow(sub3)
cat("The number of stations reporting precipitation only in mm is: ")
nrow(sub3)
cat("The number of stations reporting precipitation only in mm is:", nrow(sub3))
sub3 <- subset(sub, parm_cd == '99772')
cat("The number of stations reporting precipitation only in mm (99772) is:", nrow(sub3))
sub2 <- subset(sub, parm_cd == '72192')
cat("The number of stations reporting precipitation only in cumulative inches (72192) is:", nrow(sub2))
sub <- subset(sub, parm_cd != "00045")
nrow(sub)
sub2 <- subset(sub, parm_cd == '72192')
cat("The number of stations reporting precipitation only in cumulative inches (72192) is:", nrow(sub2))
sub3 <- subset(sub, parm_cd == '99772')
cat("The number of stations reporting precipitation only in mm (99772) is:", nrow(sub3))
sub4 <- subset(sub, parm_cd == '2609')
cat("The number of stations reporting precipitation as a total for period (00193) is:", nrow(sub4))
