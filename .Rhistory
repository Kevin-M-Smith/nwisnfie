config = config)
}
lapply(params, AddSensorMetadataVar)
}
.AddSiteMetadataVars <- function(ncdf, siteMetadata, layers, params, config) {
.debug(paste("Adding site metadata variables to NetCDF file... Total R memory usage: ",
capture.output(pryr::mem_used()),
".",
sep = ""),
config = config)
siteMetadata <- plyr::join(data.frame(familyid = layers, stringsAsFactors = FALSE),
siteMetadata,
by = "familyid")
AddSiteMetadataVar <- function(name) {
.debug(paste("Adding site metadata variable ",
name,
" to NetCDF file. Total R memory usage: ",
capture.output(pryr::mem_used()),
".",
sep = ""),
config = config)
ncdf4::ncvar_put(nc = ncdf,
varid = name,
vals = unlist(siteMetadata[name]))
.debug(paste("Successfully added site metadata variable ",
name,
" to NetCDF file. Total R memory usage: ",
capture.output(pryr::mem_used()),
".",
sep = ""),
config = config)
}
# excluded <- names(siteMetadata) %in% c("familyid")
# siteMetadataVarNames <- names(siteMetadata)[!excluded]
lapply(names(siteMetadata), AddSiteMetadataVar)
}
.CloseNetCDF <- function(ncdf, file, config){
ncdf4::nc_close(ncdf)
.debug(paste("Succesfully closed out NetCDF file (",
file,
").",
sep = ""),
config = config)
}
.AddSensorMetadataVars(ncdf = ncdf,
sensorMetadata = sensorMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
file
queue$name[i]
queue$name[i] = "~/Desktop/star.nc"
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
.AddTimeVars(ncdf = ncdf,
times = times,
config = config)
.AddSensorMetadataVars(ncdf = ncdf,
sensorMetadata = sensorMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
.AddSiteMetadataVars(ncdf = ncdf,
siteMetadata = siteMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
ncvar_get("familyid")
ncdf4::ncvar_get(ncdf, "familyid")
layersInSubset
layersInSubset <- sort(layersInSubset)
layersInSubset
siteMetadataSubset   <- subset(siteMetadata,   subset = familyid %in% layersInSubset)
sensorMetadataSubset <- subset(sensorMetadata, subset = familyid %in% layersInSubset)
# order
siteMetadataSubset <- plyr::arrange(siteMetadataSubset, familyid)
sensorMetadataSubset <- plyr::arrange(sensorMetadataSubset, familyid)
print(sum(layersInSubset != siteMetadataSubset$familyid))
print(sum(layersInSubset != sensorMetadataSubset$familyid))
queue$name[i] = "~/Desktop/star2.nc"
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
.AddTimeVars(ncdf = ncdf,
times = times,
config = config)
.AddSensorMetadataVars(ncdf = ncdf,
sensorMetadata = sensorMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
ncdf4::ncvar_get(ncdf, "familyid")
ncdf
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
.AddTimeVars(ncdf = ncdf,
times = times,
config = config)
queue$name[i] = "~/Desktop/star3.nc"
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
.AddTimeVars(ncdf = ncdf,
times = times,
config = config)
.AddSensorMetadataVars(ncdf = ncdf,
sensorMetadata = sensorMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
.AddSiteMetadataVars(ncdf = ncdf,
siteMetadata = siteMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
ncdf4::ncvar_get(ncdf, "familyid")
layersInSubset
paramcd = "00060"
ncdf4::nc_close(ncdf)
paddedParamFlat <- merge(x = paddedDataTable,
y = subset(data, paramcd == paramcd),
all.x = TRUE,
by = c("ts", "familyid"))
paddedParamFlat
subset(data, paramcd = paramcd)
parameterCode = "00060"
paddedParamFlat <- merge(x = paddedDataTable,
y = subset(data, paramcd == parameterCode),
all.x = TRUE,
by = c("ts", "familyid"))
paddedParamFlat
paddedParamCast <- reshape2::dcast(paddedParamFlat,
familyid ~ ts,
value.var = "value")
paddedParamCast
name = paste("v", paramcd, "_value", sep = "")
.message(paste0("Adding data for ", name, " to NetCDF File(s)..."), config = config)
library(nwisnfie)
ncdf <- ncdf4::nc_open("~/Downloads/national_2013-03-03.nc")
times <- ncdf4::ncvar_get(ncdf, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
flow <- ncdf4::ncvar_get(ncdf, "v00060_value")
flow[flow == -999999.00] <- NA
familyids <- ncdf4::ncvar_get(ncdf, "familyid")
# Get all layers that have SOME data.
#withData <- which(rowSums(is.na(flow)) != ncol(flow))
siteNumber <- ncdf4::ncvar_get(ncdf, "site_no")
#flow <- flow[withData, ]
#Randomly select a layer.
#set.seed(100)
#layerSelect = ceiling(runif(n = 1, min = 1, max = nrow(flow)))
layerSelect = 2
siteNumber2 <- siteNumber[layerSelect]
flow <- flow[layerSelect,]
# Combine data into data frame, remove time padding
data <- data.frame(times = times, ncdf.flow = flow)
data <- data[complete.cases(data),]
# Download 'Fresh' Data from NWIS to Validate
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
#nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")
library(dataRetrieval)
times <- ncdf4::ncvar_get(ncdf, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
flow <- ncdf4::ncvar_get(ncdf, "v00060_value")
flow[flow == -999999.00] <- NA
familyids <- ncdf4::ncvar_get(ncdf, "familyid")
# Get all layers that have SOME data.
#withData <- which(rowSums(is.na(flow)) != ncol(flow))
siteNumber <- ncdf4::ncvar_get(ncdf, "site_no")
#flow <- flow[withData, ]
#Randomly select a layer.
#set.seed(100)
#layerSelect = ceiling(runif(n = 1, min = 1, max = nrow(flow)))
layerSelect = 2
siteNumber2 <- siteNumber[layerSelect]
flow <- flow[layerSelect,]
# Combine data into data frame, remove time padding
data <- data.frame(times = times, ncdf.flow = flow)
data <- data[complete.cases(data),]
# Download 'Fresh' Data from NWIS to Validate
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
#nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")[, c("dateTime", "X_00060_00011")]
colnames(nwis) <- c("times", "nwis.flow")
# Join datasets
data <- plyr::join(x = data, y = nwis, by = "times")
head(data)
layerSelect = 2
siteNumber <- siteNumber[layerSelect]
flow <- flow[layerSelect,]
# Combine data into data frame, remove time padding
data <- data.frame(times = times, ncdf.flow = flow)
data <- data[complete.cases(data),]
# Download 'Fresh' Data from NWIS to Validate
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
#nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")[, c("dateTime", "X_00060_00011")]
colnames(nwis) <- c("times", "nwis.flow")
# Join datasets
data <- plyr::join(x = data, y = nwis, by = "times")
head(data)
ncdf <- ncdf4::nc_open("~/Downloads/national_2013-03-03.nc")
times <- ncdf4::ncvar_get(ncdf, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
times
flow <- ncdf4::ncvar_get(ncdf, "v00060_value")
flow[flow == -999999.00] <- NA
flow
View(flow)
familyids <- ncdf4::ncvar_get(ncdf, "familyid")
familyids
times
ncdf <- ncdf4::nc_open("~/Downloads/national_2013-03-03.nc")
times <- ncdf4::ncvar_get(ncdf, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times
ncdf
ncdf4::nc_close(ncdf)
ncdf <- ncdf4::nc_open("~/Downloads/national_2013-03-03.nc")
ncdf
layersInSubset
paddeParamCast
paddedParamCast
times
times.format
data$ts
data
data2$ts
data2
paddedDataTable
paddedParamCast
ncdf
queue
queue$files
queue$file
names(queue)
queue$name[i]
ncdfd <- ncdf4::nc_open("~/Desktop/star3.nc")
ncdfd <- ncvar_get(ncdfd, "v00060")
ncdfd <- ncdf4::ncvar_get(ncdfd, "v00060")
ncdfd <- ncdf4::ncvar_get(ncdfd, "v00060_value")
ncdfd <- ncdf4::nc_open("~/Desktop/star3.nc")
flow <- ncdf4::ncvar_get(ncdfd, "v00060_value")
flow
parameterCode
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
conn2 = conn
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
conn2 = StartDBConnection(config)
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
subsetPaddedParamCast <- subset(paddedParamCast,
subset = familyid %in% layersInSubset)
subsetPaddedParamCast
subsetPaddedParamCast <- plyr::arrange(subsetPaddedParamCast, layersInSubset)[, -1]
subsetPaddedParamCast <- data.matrix(subsetPaddedParamCast)
subsetPaddedParamCast
ncdf <- ncdf4::nc_open(queue$name[i], write = TRUE)
ncdf
ncdf4::nc_close(ncdf)
ncdf <- ncdf4::nc_open(queue$name[i], write = TRUE)
queue$name[i] <- "~/Desktop/star4.nc"
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
layers <- sort(unique(data$familyid))
times <- sort(unique(data$ts))
params <- unique(data$paramcd)
siteMetadata <- .GetSiteMetadata(conn = conn, config = config)
sensorMetadata <- .GetSensorMetadata(conn = conn, config = config)
paddedDataTable <- .BuildPaddedDataTable(layers = layers,
times = times,
config = config)
layers
data
data2
load("~/Desktop/data.sample")
data$ts <- .ISO8601ToEpochTime(data$ts)
layers <- sort(unique(data$familyid))
times <- sort(unique(data$ts))
params <- unique(data$paramcd)
siteMetadata <- .GetSiteMetadata(conn = conn, config = config)
sensorMetadata <- .GetSensorMetadata(conn = conn, config = config)
paddedDataTable <- .BuildPaddedDataTable(layers = layers,
times = times,
config = config)
conn <- StartDBConnection(config)
data$ts <- .ISO8601ToEpochTime(data$ts)
layers <- sort(unique(data$familyid))
times <- sort(unique(data$ts))
params <- unique(data$paramcd)
siteMetadata <- .GetSiteMetadata(conn = conn, config = config)
sensorMetadata <- .GetSensorMetadata(conn = conn, config = config)
paddedDataTable <- .BuildPaddedDataTable(layers = layers,
times = times,
config = config)
load("~/Desktop/data.sample")
data$ts <- .ISO8601ToEpochTime(data$ts)
layers <- sort(unique(data$familyid))
times <- sort(unique(data$ts))
params <- unique(data$paramcd)
siteMetadata <- .GetSiteMetadata(conn = conn, config = config)
sensorMetadata <- .GetSensorMetadata(conn = conn, config = config)
paddedDataTable <- .BuildPaddedDataTable(layers = layers,
times = times,
config = config)
setTxtProgressBar(pb, i)
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
if(length(layersInSubset) >= 1) {
layersInSubset <- sort(layersInSubset)
siteMetadataSubset   <- subset(siteMetadata,   subset = familyid %in% layersInSubset)
sensorMetadataSubset <- subset(sensorMetadata, subset = familyid %in% layersInSubset)
# order
siteMetadataSubset <- plyr::arrange(siteMetadataSubset, familyid)
sensorMetadataSubset <- plyr::arrange(sensorMetadataSubset, familyid)
print(sum(layersInSubset != siteMetadataSubset$familyid))
print(sum(layersInSubset != sensorMetadataSubset$familyid))
ncdf <- .PrepareNetCDF(layers = layersInSubset,
times = times,
params = params,
siteMetadata = siteMetadataSubset,
sensorMetadata = sensorMetadataSubset,
file = queue$name[i],
config = config)
.AddTimeVars(ncdf = ncdf,
times = times,
config = config)
.AddSensorMetadataVars(ncdf = ncdf,
sensorMetadata = sensorMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
.AddSiteMetadataVars(ncdf = ncdf,
siteMetadata = siteMetadataSubset,
layers = layersInSubset,
params = params,
config = config)
ncdf4::nc_close(ncdf)
}
}
cat("\n")
parameterCode = "00060"
ncdf
ncdf4::nc_close(ncdf)
paddedParamFlat <- merge(x = paddedDataTable,
y = subset(data, paramcd == parameterCode),
all.x = TRUE,
by = c("ts", "familyid"))
paddedParamCast <- reshape2::dcast(paddedParamFlat,
familyid ~ ts,
value.var = "value")
name = paste("v", paramcd, "_value", sep = "")
.message(paste0("Adding data for ", name, " to NetCDF File(s)..."), config = config)
layersInSubset <- RunQuery(conn = conn2,
query = queue$query[i],
config = config)[,1]
layersInSubset <- layersInSubset[layersInSubset %in% layers]
if(length(layersInSubset) >= 1) {
subsetPaddedParamCast <- subset(paddedParamCast,
subset = familyid %in% layersInSubset)
subsetPaddedParamCast <- plyr::arrange(subsetPaddedParamCast, layersInSubset)[, -1]
subsetPaddedParamCast <- data.matrix(subsetPaddedParamCast)
ncdf <- ncdf4::nc_open(queue$name[i], write = TRUE)
ncdf4::ncvar_put(nc = ncdf,
varid = name,
vals = subsetPaddedParamCast,
verbose = FALSE)
ncdf4::nc_close(ncdf)
}
abc <- ncdf4::nc_open("~/Desktop/star4.nc")
flow <- ncdf4::ncvar_get(abc, "v00060_value")
flow
flow[1,]
siteno <- ncdf4::ncvar_get(abc, "site_no")
siteno
siteNumber = siteno[1]
times <- ncdf4::ncvar_get(abc, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")[, c("dateTime", "X_00060_00011")]
colnames(nwis) <- c("times", "nwis.flow")
data <- plyr::join(x = data, y = nwis, by = "times")
nwis
flow
flow[1,]
nwis$X
nwis$nwis.flow
length(nwis$nwis.flow)
length(flow[1,])
times
nwis$times
nwis$times == times
flow[7,]
View(flow)
flow[9,]
sitenos
siteno[9]
siteNumber = siteno[9]
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")[, c("dateTime", "X_00060_00011")]
colnames(nwis) <- c("times", "nwis.flow")
View(nwis)
flow
flow[9,]
length(flow[9,])
?length
flow[9,] == nwis$nwis.flow
library(nwisnfie)
library(ncdf4)
nc_open("~/Downloads/2013-04-05.nc")
def <- nc_open("~/Downloads/national_2013-04-05.nc")
times <- ncdf4::ncvar_get(def, "time")
times <- as.POSIXct(times, origin = "1970-01-01")
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
flow <- ncdf4::ncvar_get(def, "v00060_value")
flow[flow == -999999.00] <- NA
familyids <- ncdf4::ncvar_get(def, "familyid")
# Get all layers that have SOME data.
#withData <- which(rowSums(is.na(flow)) != ncol(flow))
siteNumber <- ncdf4::ncvar_get(def, "site_no")
#flow <- flow[withData, ]
#Randomly select a layer.
#set.seed(100)
#layerSelect = ceiling(runif(n = 1, min = 1, max = nrow(flow)))
View(flow)
layerSelect = 12
siteNumber <- siteNumber[layerSelect]
flow <- flow[layerSelect,]
# Combine data into data frame, remove time padding
data <- data.frame(times = times, ncdf.flow = flow)
data <- data[complete.cases(data),]
# Download 'Fresh' Data from NWIS to Validate
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")[, c("dateTime", "X_00060_00011")]
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")
nwis
times.format
times <- ncdf4::ncvar_get(def, "time")
times
times <- as.POSIXct(times, origin = "1970-01-01")
times
siteNumber
siteNumber <- ncdf4::ncvar_get(def, "site_no")
siteNumber
familyid
familyids
familyids[12]
siteNumber
siteNumber[12]
url <- constructNWISURL(siteNumber = siteNumber, parameterCd = "00060", startDate = min(times.format),
endDate = max(times.format), service = "uv")
url
nwis <- importWaterML1(url, asDateTime = TRUE, tz = "")
nwis
times <- ncdf4::ncvar_get(def, "time")
times
times <- as.POSIXct(times, origin = "1970-01-01")
times
times.format <- strftime(times, format = "%Y-%m-%dT%H:%M:%S%z")
data
library(nwisnfie)
url
responseCode <- RCurl::curlPerform(url = url,
writefunction = xml$update,
httpheader = c(AcceptEncoding="gzip,deflate"))
